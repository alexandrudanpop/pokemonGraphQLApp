{"version":3,"sources":["graphQlFetch.js","Pokemon.js","Loader.js","PokemonsList.js","graphQlQuery.js","PokemonApp.js","PokemonDetails.js","App.js","registerServiceWorker.js","index.js"],"names":["_callee","query","response","regenerator_default","a","wrap","_context","prev","next","fetch","method","headers","Content-Type","body","JSON","stringify","sent","json","abrupt","stop","this","src_graphQlFetch","src_Pokemon","_ref","number","name","image","react_default","createElement","src","alt","src_Loader","className","react_spinners","color","width","height","src_PokemonsList","pokemons","fetchNext","loading","Fragment","map","p","key","id","Link","to","concat","style","textDecoration","length","onClick","createListQuery","take","createPokemonQuery","pokemonName","src_PokemonApp","state","nextTake","_ref2","data","_this","setState","_objectSpread","render","react","src_PokemonDetails","pokemon","props","match","params","PokemonDetails_objectSpread","evolutions","e","src_App_0","BrowserRouter","Switch","Route","exact","path","component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","react_dom_default","document","getElementById","URL","origin","addEventListener","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.00c60135.chunk.js","sourcesContent":["async function graphQlFetch(query) {\r\n  const response = await fetch(\"https://graphql-pokemon.now.sh/\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify({\r\n      query\r\n    })\r\n  });\r\n\r\n  return await response.json();\r\n}\r\n\r\nexport default graphQlFetch;\r\n","import React from \"react\";\r\n\r\nconst Pokemon = ({ number, name, image }) => (\r\n  <div>\r\n    <h3>\r\n      #{number} {name}\r\n    </h3>\r\n    <img src={image} alt={name} />\r\n    <hr />\r\n  </div>\r\n);\r\n\r\nexport default Pokemon;\r\n","import React from \"react\";\r\nimport { BarLoader } from \"react-spinners\";\r\n\r\nconst Loader = () => (\r\n  <div className=\"spinner-centered\">\r\n    <BarLoader color={\"#CAC050\"} width={2000} height={7} />\r\n  </div>\r\n);\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Pokemon from \"./Pokemon\";\r\nimport Loader from \"./Loader\";\r\n\r\nconst PokemonsList = ({ pokemons, fetchNext, loading }) => (\r\n  <>\r\n    <h1>Pokemons</h1>\r\n    {loading && <Loader />}\r\n    {pokemons.map(p => (\r\n      <div key={p.id}>\r\n        <Link\r\n          to={`/pokemon/${p.name}`}\r\n          style={{ textDecoration: \"none\", color: \"black\" }}\r\n        >\r\n          <Pokemon image={p.image} name={p.name} number={p.number} />\r\n        </Link>\r\n      </div>\r\n    ))}\r\n    {pokemons.length > 0 && (\r\n      <button className=\"app-button \" onClick={fetchNext}>\r\n        More\r\n      </button>\r\n    )}\r\n  </>\r\n);\r\n\r\nexport default PokemonsList;\r\n","const createListQuery = take => `{\r\n  pokemons(first: ${take}) {\r\n    id\r\n    number\r\n    name\r\n    image\r\n  }\r\n}`;\r\n\r\nconst createPokemonQuery = pokemonName => `{\r\n  pokemon(\r\n    name: \"${pokemonName}\"\r\n  ) {\r\n    id\r\n    number\r\n    name\r\n    image\r\n    evolutions {\r\n      id\r\n      number\r\n      name\r\n      image\r\n    }\r\n  }\r\n}`;\r\n\r\nexport { createListQuery, createPokemonQuery };\r\n","import React, { Component } from \"react\";\r\nimport graphQlFetch from \"./graphQlFetch\";\r\nimport PokemonsList from \"./PokemonsList\";\r\nimport { createListQuery } from \"./graphQlQuery\";\r\n\r\nclass PokemonApp extends Component {\r\n  state = {\r\n    pokemons: [],\r\n    take: 10,\r\n    loading: false\r\n  };\r\n\r\n  async componentDidMount() {\r\n    await this.fetchNext();\r\n  }\r\n\r\n  fetchNext = async () => {\r\n    if (!this.state.loading) {\r\n      const nextTake = this.state.take + 10;\r\n      this.setState({ ...this.state, loading: true, take: nextTake });\r\n\r\n      const { data } = await graphQlFetch(createListQuery(nextTake));\r\n      this.setState({\r\n        ...this.state,\r\n        pokemons: data.pokemons,\r\n        loading: false\r\n      });\r\n    }\r\n  };\r\n\r\n  render = () => (\r\n    <PokemonsList\r\n      pokemons={this.state.pokemons}\r\n      loading={this.state.loading}\r\n      fetchNext={this.fetchNext}\r\n    />\r\n  );\r\n}\r\n\r\nexport default PokemonApp;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport graphQlFetch from \"./graphQlFetch\";\r\nimport Loader from \"./Loader\";\r\nimport Pokemon from \"./Pokemon\";\r\nimport { createPokemonQuery } from \"./graphQlQuery\";\r\n\r\nclass PokemonDetails extends Component {\r\n  state = { pokemon: {}, loading: false };\r\n\r\n  async componentDidMount() {\r\n    const pokemonName = this.props.match.params.name;\r\n    this.setState({ ...this.state, loading: true });\r\n\r\n    const { data } = await graphQlFetch(createPokemonQuery(pokemonName));\r\n    this.setState({ ...this.state, pokemon: data.pokemon, loading: false });\r\n  }\r\n\r\n  render() {\r\n    const { pokemon } = this.state;\r\n\r\n    if (this.state.loading) {\r\n      return <Loader />;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <h1>Evolution</h1>\r\n        <Pokemon\r\n          number={pokemon.number}\r\n          name={pokemon.name}\r\n          image={pokemon.image}\r\n        />\r\n\r\n        {pokemon.evolutions &&\r\n          pokemon.evolutions.length > 0 &&\r\n          pokemon.evolutions.map(e => (\r\n            <Pokemon\r\n              key={e.id}\r\n              number={e.number}\r\n              name={e.name}\r\n              image={e.image}\r\n            />\r\n          ))}\r\n\r\n        <Link style={{ textDecoration: \"none\", color: \"black\" }} to=\"/\">\r\n          <button className=\"app-button\">Back</button>\r\n        </Link>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PokemonDetails;\r\n","import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport PokemonApp from \"./PokemonApp\";\r\nimport PokemonDetails from \"./PokemonDetails\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div className=\"App\">\r\n          <Switch>\r\n            <Route exact path={\"/\"} component={PokemonApp} />\r\n            <Route exact path={\"/pokemon/:name\"} component={PokemonDetails} />\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}